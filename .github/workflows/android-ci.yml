name: Android CI - Build APK

on:
  push:
    branches: [ "main", "master" ] # Déclencher sur push vers main ou master
  pull_request:
    branches: [ "main", "master" ] # Déclencher aussi sur les Pull Requests vers main ou master

jobs:
  build-apk:
    name: Build Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' # React Native nécessite généralement une version spécifique du JDK
          distribution: 'temurin' # Distribution populaire du JDK

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Choisissez une version LTS de Node.js compatible
          cache: 'npm' # Mettre en cache les dépendances npm

      - name: Install npm dependencies
        run: npm install

      # Crée un fichier keystore à partir d'un secret GitHub encodé en Base64
      # Le secret GITHUB_ACTIONS_SIGNING_KEY_BASE64 doit contenir le fichier .keystore encodé en base64
      # Vous pouvez générer cette chaîne avec la commande : base64 -w 0 my-release-key.keystore
      - name: Decode Keystore
        if: secrets.GITHUB_ACTIONS_SIGNING_KEY_BASE64 != '' # Ne s'exécute que si le secret est défini
        env:
          SIGNING_KEY_BASE64: ${{ secrets.GITHUB_ACTIONS_SIGNING_KEY_BASE64 }}
        run: |
          echo $SIGNING_KEY_BASE64 | base64 --decode > android/app/my-release-key.keystore
          echo "Keystore decoded successfully."

      # Créer le fichier gradle.properties avec les informations de signature à partir des secrets GitHub
      # Ces secrets doivent être configurés dans les paramètres du dépôt GitHub :
      # GITHUB_ACTIONS_KEY_ALIAS, GITHUB_ACTIONS_KEY_PASSWORD, GITHUB_ACTIONS_STORE_PASSWORD
      - name: Create gradle.properties for signing
        if: secrets.GITHUB_ACTIONS_SIGNING_KEY_BASE64 != '' # Ne s'exécute que si le secret est défini
        run: |
          echo "MYAPP_RELEASE_STORE_FILE=my-release-key.keystore" > android/gradle.properties
          echo "MYAPP_RELEASE_KEY_ALIAS=${{ secrets.GITHUB_ACTIONS_KEY_ALIAS }}" >> android/gradle.properties
          echo "MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.GITHUB_ACTIONS_STORE_PASSWORD }}" >> android/gradle.properties
          echo "MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.GITHUB_ACTIONS_KEY_PASSWORD }}" >> android/gradle.properties
          echo "Gradle properties for signing created."
        working-directory: ./ # S'assurer que le chemin vers android/gradle.properties est correct

      - name: Give gradlew execution permission
        run: chmod +x android/gradlew
        working-directory: ./

      - name: Build Release APK
        run: ./gradlew assembleRelease
        working-directory: ./android

      - name: Upload Release APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RockPaperScissors-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error # Fait échouer le workflow si l'APK n'est pas trouvé

      - name: Notify if Keystore secret is missing (Optional)
        if: secrets.GITHUB_ACTIONS_SIGNING_KEY_BASE64 == ''
        run: echo "::warning:: Keystore secret (GITHUB_ACTIONS_SIGNING_KEY_BASE64) not found. APK will not be signed or will fail at signing if signing is mandatory."

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'push' # S'exécute seulement si un job précédent a échoué et que c'est un push
    steps:
      - name: Send Failure Notification (Example)
        run: echo "::error:: Le build de l'APK a échoué pour le commit ${{ github.sha }} sur la branche ${{ github.ref_name }}."
        # Ici, vous pourriez intégrer une action pour envoyer une notification Slack, email, etc.
        # Par exemple, en utilisant une action du Marketplace.

# Instructions pour configurer les secrets GitHub (à faire dans les paramètres du dépôt > Secrets and variables > Actions):
# 1. GITHUB_ACTIONS_SIGNING_KEY_BASE64:
#    - Sur votre machine locale, où vous avez votre fichier `my-release-key.keystore`:
#      `base64 -w 0 my-release-key.keystore` (Linux/macOS)
#      `certutil -encodehex -f my-release-key.keystore my-release-key.keystore.hex & set /p STR=<my-release-key.keystore.hex & del my-release-key.keystore.hex & echo %STR%` (Windows, puis convertir l'hex en base64)
#      Ou utilisez un outil en ligne pour convertir le *fichier* en base64.
#    - Copiez la longue chaîne de caractères résultante et collez-la comme valeur pour ce secret.
# 2. GITHUB_ACTIONS_KEY_ALIAS: L'alias de votre clé (ex: `my-key-alias`).
# 3. GITHUB_ACTIONS_STORE_PASSWORD: Le mot de passe de votre keystore.
# 4. GITHUB_ACTIONS_KEY_PASSWORD: Le mot de passe de votre clé privée (souvent le même que le mot de passe du keystore).

# Note sur android/app/build.gradle:
# Assurez-vous que votre fichier `android/app/build.gradle` est configuré pour lire les propriétés
# `MYAPP_RELEASE_STORE_FILE`, `MYAPP_RELEASE_KEY_ALIAS`, `MYAPP_RELEASE_STORE_PASSWORD`, `MYAPP_RELEASE_KEY_PASSWORD`
# pour la configuration de signature `release`, comme indiqué dans les instructions de génération d'APK.
# Le workflow crée un fichier `android/gradle.properties` qui sera lu par Gradle lors du build.
# Il est recommandé d'ajouter `android/gradle.properties` à votre `.gitignore`.
#
# Pour que ce workflow fonctionne, le fichier `my-release-key.keystore` n'a PAS besoin d'être
# dans le dépôt. Il est injecté via le secret GITHUB_ACTIONS_SIGNING_KEY_BASE64.
#
# N'oubliez pas de configurer les secrets mentionnés ci-dessus dans les paramètres de votre dépôt GitHub.
# Sans eux, la partie signature échouera et l'APK de release ne sera pas généré correctement.
#
# Adaptez les versions de Node.js et JDK selon les besoins de votre version de React Native.
# La version 17 du JDK est souvent requise pour les builds Android récents.
# Node 18 est une version LTS actuelle.
#
# Le `working-directory: ./android` pour la tâche `Build Release APK` est crucial.
# Le `working-directory: ./` pour `Create gradle.properties for signing` est utilisé pour que le chemin `android/gradle.properties` soit correct.
# `chmod +x android/gradlew` est nécessaire car le script gradlew pourrait ne pas avoir les permissions d'exécution après le checkout.
